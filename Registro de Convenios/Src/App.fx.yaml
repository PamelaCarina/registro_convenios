App As appinfo:
    BackEnabled: =false
    OnStart: |
        =Set(
            cargando,
            true
        );
        //////////////////////////////////LLAMADOS A FLUJOS//////////////////////////////////////
        //USUARIO LOGEADO
        //Set(persona_solicitante; 'VRIM-PATraedatosdeusuario'.Run(User().Email));;
        Set(
            persona_solicitante,
            'VRIM-PATraedatosdeusuario'.Run("pcareaga@udec.cl")
            //'VRIM-PATraedatosdeusuario'.Run("jaimecontreras@udec.cl")
        );
        //LISTAS DESPLEGABLES
        Set(
            datos,
            'DTI-PAListaespecificacionesconvenio'.Run()
        );
        //LISTADO SOLICITUDES
        ClearCollect(
            listado_solicitudes,
            Sort(
                'Convenios-PATraerlistadodesolicitud'.Run(persona_solicitante.correo_udec),
                fecha,
                SortOrder.Descending
            )
        );
        //NOMBRES REPARTICIONES
        Set(
            reparticiones,
            Sort(
                'DTI-PATraerreparticiones'.Run(),
                Nombre1
            )
        );
        //AUTORIDADES MÁXIMAS
        Set(
            autoridades_maximas,
            Sort(
                'DTI-PATraerautoridadesmáximas'.Run(),
                field_3
            )
        );
        //MOSTRAR SOLICITUDES
        Clear(nombre_contraparte_para_filtro);
        Clear(listado_solicitudes_recuperadas);
        ForAll(
            listado_solicitudes,
            If(
                CountRows(nombres_contrapartes_internacionales) > 0,
                If(
                    CountRows(nombres_contrapartes_nacionales) > 0,
                //si hay contrapartes internacionales y nacionales
                    Collect(
                        nombre_contraparte_para_filtro,
                        First(nombres_contrapartes_internacionales).Value
                    ),
                //si hay contrapartes internacionales y no nacionales
                    Collect(
                        nombre_contraparte_para_filtro,
                        First(nombres_contrapartes_internacionales).Value
                    )
                ),
                If(
                    CountRows(nombres_contrapartes_nacionales) > 0,
                //si no hay contrapartes internacionales y pero si nacionales
                    Collect(
                        nombre_contraparte_para_filtro,
                        First(nombres_contrapartes_nacionales).Value
                    ),
                //si no hay contrapartes internacionales ni nacionales
                    Collect(
                        nombre_contraparte_para_filtro,
                        "SIN CONTRAPARTES ASOCIADAS"
                    )
                )
            );
            Collect(
                listado_solicitudes_recuperadas,
                {
                    alcance_territorial: alcance_territorial,
                    fecha: fecha,
                    id_convenio: id_convenio,
                    id_estado: id_estado,
                    nombres_contrapartes_nacionales: nombres_contrapartes_nacionales,
                    nombres_contrapartes_internacionales: nombres_contrapartes_internacionales,
                    ticket: ticket,
                    nombre_contraparte_para_filtro: Last(nombre_contraparte_para_filtro).Value
                }
            )
        );
        Set(
            cargando,
            false
        );
        //NOMBRES CONTRAPARTES INTERNACIONALES
        Set(
            Contrapartes_inter,
            Sort(
                'DTI-PATraernombrescontrapartesinternacionales'.Run(),
                RAZON_SOCIAL
            )
        );
        //PAISES
        Set(
            paises,
            Sort(
                'DTI-PATraerpaíses'.Run().paises,
                Nombre_x0020_Pa_x00ed_s
            )
        );
        //////////////////////////////////COMPLETAR VARIABLES Y COLECCIONES//////////////////////////////////////
        //UNIDAD SOLICITANTE
        ClearCollect(
            organismos_actividad,
            SortByColumns(
                persona_solicitante.'array organismo actividad',
                "Reparticion"
            )
        );
        //ALCANCE TERRITORIAL
        Clear(lista_alcance);
        ForAll(
            datos.alcance_territorial,
            Collect(
                lista_alcance,
                {
                    id: ItemInternalId,
                    valor: Upper(Title)
                }
            )
        );
        ClearCollect(
            lista_alcance,
            Sort(
                lista_alcance,
                valor
            )
        );
        //TIPOLOGÍA
        Clear(lista_tipologia);
        ForAll(
            datos.tipologia,
            Collect(
                lista_tipologia,
                {
                    id: ItemInternalId,
                    valor: Upper(Title)
                }
            )
        );
        ClearCollect(
            lista_tipologia,
            Sort(
                lista_tipologia,
                valor
            )
        );
        //TIPO SOLICITUD
        Clear(lista_tipo_solicitud);
        ForAll(
            datos.tipo_solicitud,
            Collect(
                lista_tipo_solicitud,
                {
                    id: ItemInternalId,
                    valor: Upper(Title)
                }
            )
        );
        ClearCollect(
            lista_tipo_solicitud,
            Sort(
                lista_tipo_solicitud,
                valor
            )
        );
        //MODALIDAD
        Clear(lista_modalidad);
        ForAll(
            datos.modalidad,
            Collect(
                lista_modalidad,
                {
                    id: ItemInternalId,
                    valor: Upper(Title)
                }
            )
        );
        ClearCollect(
            lista_modalidad,
            Sort(
                lista_modalidad,
                valor
            )
        );
        //NOMBRES REPARTICIONES
        Clear(Nombres_reparticiones1);
        ForAll(
            reparticiones,
            Collect(
                Nombres_reparticiones1,
                {
                    reparticion: Nombre1,
                    codigo: Title
                }
            )
        );
        ClearCollect(
            reparticion_no_repetida,
            Distinct(
                Nombres_reparticiones1,
                reparticion
            )
        );
        Clear(Nombres_reparticiones);
        ForAll(
            reparticion_no_repetida,
            Collect(
                Nombres_reparticiones,
                First(
                    Filter(
                        Nombres_reparticiones1,
                        reparticion = Value
                    )
                )
            )
        );
        Remove(
            Nombres_reparticiones,
            LookUp(
                Nombres_reparticiones,
                reparticion = "Reparticion 9000"
            );
            LookUp(
                Nombres_reparticiones,
                reparticion = "Repartición Antigua Inexistente (Crear)"
            );
            LookUp(
                Nombres_reparticiones,
                reparticion = "Reparticion Hija 2"
            );
            LookUp(
                Nombres_reparticiones,
                reparticion = "Valido"
            )
        );
        //AUTORIDADES MÁXIMAS
        Clear(Nombres_autoridades);
        ForAll(
            autoridades_maximas,
            Collect(
                Nombres_autoridades,
                {
                    nombre: Upper(
                        Concatenate(
                            field_3,
                            " ",
                            field_4,
                            ", ",
                            field_5
                        )
                    ),
                    cargo: Upper(CARGO),
                    correo: Upper(CORREO_UDEC),
                    telefono: TELEFONO
                }
            )
        );
        //LIMPIAR NACIONALES
        Clear(contrapartes_nacionales);
        //LIMPIAR INTERNACIONALES
        Clear(contrapartes_internacionales);
        //LIMPIAR SOLICITUDES AÑADIR CONTRAPARTE
        Clear(solicitudes_añadir_contraparte);
        //NOMBRES CONTRAPARTES INTERNACIONALES
        Clear(Nombres_contrapartes_internacionales);
        ForAll(
            Contrapartes_inter,
            Collect(
                Nombres_contrapartes_internacionales,
                {nombre: RAZON_SOCIAL}
            )
        );
        //PAISES
        Clear(lista_paises);
        ForAll(
            paises,
            Collect(
                lista_paises,
                {pais: Upper(ThisRecord.Nombre_x0020_Pa_x00ed_s)}
            )
        );
        Remove(
            lista_paises,
            LookUp(
                lista_paises,
                pais = "NO DEFINIDO"
            )
        );
        //opciones seleccionables política del convenio
        ClearCollect(
            dd_tipo,
            {
                valor: Upper("Formación (pregrado, postgrado, formación permanente)"),
                id: "formacion"
            },
            {
                valor: Upper("Extensión Académica"),
                id: "extension_academica"
            },
            {
                valor: Upper("Extensión Cultural"),
                id: "extension_cultural"
            },
            {
                valor: Upper("Bidireccional"),
                id: "bidireccional"
            },
            {
                valor: Upper("Otra"),
                id: "otra"
            }
        );
        ClearCollect(
            dd_sectores,
            {
                valor: Upper("Público - Político"),
                id: "publico_politico"
            },
            {
                valor: Upper("Social Comunitario"),
                id: "social_comunitario"
            },
            {
                valor: Upper("Cultural"),
                id: "cultural"
            },
            {
                valor: Upper("Productivo"),
                id: "productivo"
            },
            {
                valor: Upper("Comunidad Universitaria"),
                id: "comunidad_uni"
            }
        );
        ClearCollect(
            dd_ambito,
            {
                valor: Upper("Extensión"),
                id: "extension"
            },
            {
                valor: Upper("Comunicaciones"),
                id: "comunicaciones"
            },
            {
                valor: Upper("Emprendimiento"),
                id: "emprendimiento"
            },
            {
                valor: Upper("Transferencia tecnológica"),
                id: "transferencia_tecnologica"
            },
            {
                valor: Upper("Asistencia técnica"),
                id: "asistencia_tecnica"
            },
            {
                valor: Upper("Interacción con red alumni"),
                id: "red_alumni"
            },
            {
                valor: Upper("Relaciones institucionales"),
                id: "rel_institucionales"
            },
            {
                valor: Upper("Relaciones internacionales"),
                id: "rel_internacionales"
            },
            {
                valor: Upper("Prácticas profesionales, pasantías estudiantiles y académicas"),
                id: "practicas_pasantia"
            },
            {
                valor: Upper("Servicios"),
                id: "servicios"
            }
        );

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

